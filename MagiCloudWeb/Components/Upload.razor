@using MagiCommon
@using Microsoft.Extensions.Logging
@using System 
@using System.IO

@inject ITokenProvider TokenProvider
@inject IMagiCloudAPI MagicApi
@inject ILogger<Upload> Logger

<h3>Upload Files</h3>

<p>
    <FileEdit @ref="@fileEdit" Changed="@LoadFiles" Multiple Written="@OnWritten" Progressed="@OnProgressed" AutoReset="false" MaxMessageSize=1048576 />
</p>

@if (totalUpload > 0)
{
    @if (!finished)
    {
        <p>Uploaded... @uploaded / @totalUpload</p>
        <Progress Value="@progress" Color="Color.Success"/>
    }
    else
    {
        <p>Upload complete!</p>
    }
}
@if (errorMessages.Any())
{
    <ul>
    @foreach (var msg in errorMessages)
    {
        <li style="color:red">@msg</li>
    }
    </ul>
}

@code {
    private long maxFileSize = 1024 * 1024 * 256; //256 MiB/0.25 GiB
    private int uploaded = 0;
    private int totalUpload = 0;
    private int? progress;
    private bool finished = false;
    private List<string> errorMessages = new();
    private FileEdit fileEdit;

    [Parameter]
    public EventCallback OnUploadComplete { get; set; }

    private async Task LoadFiles(FileChangedEventArgs e)
    {
        uploaded = 0;
        finished = false;
        progress = null;
        errorMessages.Clear();
        totalUpload = e.Files.Length;

        foreach (var file in e.Files)
        {
            try
            {
                var info = new MagiCommon.Models.ElasticFileInfo
                {
                    Name =  Path.GetFileNameWithoutExtension(file.Name),
                    Extension = Path.GetExtension(file.Name).TrimStart('.'),
                    //MimeType = file.,
                    LastModified = file.LastModified,
                    Size = file.Size
                };
                await MagicApi.UploadFileAsync(info, file.OpenReadStream(maxFileSize));
                uploaded++;
                this.StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}", 
                    file.Name, ex.Message);
                errorMessages.Add($"{file.Name}: Error {ex.Message}");
            }
        }
        finished = true;
        progress = null;
        //await fileEdit.Reset().AsTask();
        await OnUploadComplete.InvokeAsync();
    }

    void OnWritten( FileWrittenEventArgs e )
    {
        progress = (int)(100.0 * e.Position / e.File.Size);
        Console.WriteLine( $"File: {e.File.Name} Position: {e.Position}" );
    }

    void OnProgressed( FileProgressedEventArgs e )
    {
        Console.WriteLine( $"File: {e.File.Name} Progress: {e.Percentage}" );
    }
}