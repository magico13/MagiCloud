@using MagiCommon
@using Microsoft.Extensions.Logging
@using System 
@using System.IO

@inject ITokenProvider TokenProvider
@inject IMagiCloudAPI MagicApi
@inject ILogger<Upload> Logger

<Heading Size=HeadingSize.Is3>Upload Files</Heading>

<Paragraph>
    <FileEdit @ref=fileEdit Changed=LoadFiles Multiple Written=OnWritten AutoReset=false MaxMessageSize=Constants.UPLOAD_CHUNK_SIZE />
</Paragraph>

@if (totalUpload > 0)
{
    @if (!finished)
    {
        <Paragraph>Uploaded... @uploaded / @totalUpload</Paragraph>
        <Progress Value=progress Color=Color.Success Striped>@progress %</Progress>
    }
    else
    {
        <p>Upload complete!</p>
    }
}
@if (errorMessages.Any())
{
    <UnorderedList>
    @foreach (var msg in errorMessages)
    {
        <UnorderedListItem TextColor=TextColor.Danger>@msg</UnorderedListItem>
    }
    </UnorderedList>
}

@code {
    private long maxFileSize = 1024 * 1024 * 1024 * 2L; //2 GB
    private int uploaded = 0;
    private int totalUpload = 0;
    private int? progress;
    private long totalBytes = 0;
    private long uploadedBytes = 0;
    private bool finished = false;
    private List<string> errorMessages = new();
    private FileEdit fileEdit;

    [Parameter]
    public EventCallback OnUploadComplete { get; set; }
    [Parameter]
    public string CurrentDirectory { get; set; }

    private async Task LoadFiles(FileChangedEventArgs e)
    {
        uploaded = 0;
        finished = false;
        progress = null;
        errorMessages.Clear();
        totalUpload = e.Files.Length;

        foreach (var file in e.Files)
        {
            try
            {
                progress = 0;
                uploadedBytes = 0;
                totalBytes = file.Size;
                Logger.LogInformation("Starting upload of file {FileName} of size {Size} bytes", file.Name, file.Size);
                var curDir = string.IsNullOrWhiteSpace(CurrentDirectory) ? "/" : CurrentDirectory;
                var info = new MagiCommon.Models.ElasticFileInfo
                {   
                    Name = Path.Combine(curDir, Path.GetFileNameWithoutExtension(file.Name)),
                    Extension = Path.GetExtension(file.Name).TrimStart('.'),
                    MimeType = file.Type,
                    LastModified = file.LastModified,
                    Size = file.Size
                };
                using var fileStream = file.OpenReadStream(maxFileSize);
                await MagicApi.UploadFileAsync(info, fileStream);
                uploaded++;
                this.StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}", 
                    file.Name, ex.Message);
                errorMessages.Add($"{file.Name}: Error {ex.Message}");
            }
        }
        finished = true;
        progress = null;
        await OnUploadComplete.InvokeAsync();
    }

    void OnWritten( FileWrittenEventArgs e )
    {
        uploadedBytes = e.Position;
        totalBytes = e.File.Size;
        progress = (int)(100.0 * uploadedBytes / totalBytes);
        this.StateHasChanged();
        Console.WriteLine( $"File: {e.File.Name} {uploadedBytes} / {totalBytes} ({progress} %)" );
    }
}