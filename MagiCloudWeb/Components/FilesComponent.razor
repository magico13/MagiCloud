@using Blazorise
@using MagiCommon
@using MagiCommon.Extensions
@using MagiCommon.Models
@using Microsoft.Extensions.Logging

@inject ITokenProvider TokenProvider
@inject IMagiCloudAPI MagicApi
@inject ILogger<FilesComponent> Logger

<Upload OnUploadComplete="@FilesChanged" />

<h3>Files</h3>
@if (files?.Any() == true)
{
    <DataGrid TItem="ElasticFileInfo" 
                Data="@files"
                Sortable
                SelectionMode="DataGridSelectionMode.Single"
                CommandMode="DataGridCommandMode.Default"
                Responsive
                PageSize=10
                ShowPager
                ShowPageSizes
                Editable
                EditMode="DataGridEditMode.Inline"
                RowRemoved="@RowRemoved"
                RowUpdated="@RowUpdated">
        <DataGridColumns>
            <DataGridCommandColumn TItem="ElasticFileInfo" NewCommandAllowed="false" EditCommandAllowed="true" DeleteCommandAllowed="true"  >
                <SaveCommandTemplate>
                    <Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked"> <Icon Name="IconName.Save"/> </Button>
                </SaveCommandTemplate>
                <CancelCommandTemplate>
                    <Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked"> <Icon Name="IconName.Times"/> </Button>
                </CancelCommandTemplate>
                <EditCommandTemplate>
                    <Button ElementId="btnEdit" Color="Color.Primary" Clicked="@context.Clicked"> <Icon Name="IconName.Edit"/> </Button>
                </EditCommandTemplate>
                <DeleteCommandTemplate>
                    <Button ElementId="btnDelete" Color="Color.Danger" Clicked="@context.Clicked"> <Icon Name="IconName.Delete"/> </Button>
                </DeleteCommandTemplate>
            </DataGridCommandColumn>
            <DataGridColumn TItem="ElasticFileInfo" Field="@nameof(ElasticFileInfo.Name)" Caption="File" Editable>
                <DisplayTemplate>
                    <Button Type="ButtonType.Link" To="@GetFileContentUri(context.Id, true)" Target="Target.Blank">
                         <Icon Name="IconName.Download" />
                     </Button>
                     <Anchor To="@GetFileContentUri(context.Id, false)" Target="Target.Blank">
                         @context.GetFullPath()
                     </Anchor>
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="ElasticFileInfo" Field="@nameof(ElasticFileInfo.Size)" Caption="File Size">
                <DisplayTemplate>
                    @((context.Size/1024.0).ToString("N1")) kiB
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="ElasticFileInfo" Field="@nameof(ElasticFileInfo.MimeType)" Caption="File Type" />
            <DataGridColumn TItem="ElasticFileInfo" Field="@nameof(ElasticFileInfo.LastUpdated)" Caption="Last Update">
                <DisplayTemplate>
                    @(context.LastUpdated.LocalDateTime)
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="ElasticFileInfo" Field="@nameof(ElasticFileInfo.IsPublic)" Caption="Public?" >
                <DisplayTemplate>
                    @if(context.IsPublic)
                    {
                        <Button Clicked="@(() => UpdateVisibility(context, false))">
                            <Icon Name="IconName.Eye"/>
                        </Button>
                    }
                    else
                    {
                        <Button Clicked="@(() => UpdateVisibility(context, true))">
                            <Icon Name="IconName.EyeSlash" IconStyle="IconStyle.Regular"/>
                        </Button>
                    }
                </DisplayTemplate>
            </DataGridColumn>
        </DataGridColumns>
    </DataGrid>
}
else
{
    <Paragraph>
        No files found...
    </Paragraph>
}