@page "/chat"
@page "/chat/{Id}"
@using MagiCloud.Services;
@using MagiCloud;
@using MagiCloud.Services.ChatServices;
@using MagiCommon.Comparers.ElasticFileInfoComparers;
@using MagiCommon.Extensions
@using MagiCommon.Interfaces;
@using MagiCommon.Models.AssistantChat;
@using Markdig;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Text;

@attribute [Authorize]

@inject IChatCompletionService ChatCompletionService
@inject IElasticFileRepo ElasticManager
@inject ChatAssistantCommandHandler ChatAssistantCommandHandler

<h2>Chat with Assistant</h2>
@if (Chat is null)
{
    if (ForbiddenMessage is not null)
    {
        <Paragraph>@ForbiddenMessage</Paragraph>
    }
    else
    {
        <Paragraph>The assistant is analyzing your documents... Please wait...</Paragraph>
    }
}
else
{
    <Card>
        <CardBody>
            @foreach(var message in Chat.Messages.Where(m => m.Role != Role.System))
            {
                @*Assistant messages can use markdown but we shouldn't let users do that.*@
                var text = message.Role == Role.Assistant ? Markdown.ToHtml(message.Content, MarkdownPipeline) : message.Content;

                <Paragraph TextAlignment="@(message.Role == Role.User ? TextAlignment.End : TextAlignment.Start)">@((MarkupString)$"<b>{message.Role}</b>: {text}")</Paragraph>
            }
            <Addons>
                <Addon AddonType=AddonType.Body>
                    <TextEdit @bind-Text=UserMessage KeyUp=KeyUpHandler></TextEdit>
                </Addon>
                <Addon AddonType=AddonType.End>
                    <Button Color="Color.Primary" Clicked="SendUserMessageAsync">Send</Button>
                </Addon>
            </Addons>
            @if(LastResponse is not null)
            {
                <Text>@($"{LastResponse.Usage.TotalTokens}/16384")</Text>
            }
        </CardBody>
    </Card>
}


@code {
    [CascadingParameter] 
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private string UserId { get; set; }
    private Chat Chat { get; set; }
    private string ForbiddenMessage { get; set; }
    private ChatCompletionResponse LastResponse { get; set; }

    private MarkdownPipeline MarkdownPipeline { get; set; } = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();

    [Parameter] 
    public string Id { get; set; }
    protected string UserMessage { get; set; }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!firstRender) return;
        var authState = await AuthenticationStateTask;
        UserId = authState.User.GetUserId();

        var initialRequest = new ChatCompletionRequest
        {
            User = UserId,
            Model = "gpt-3.5-turbo-0613",

        };

        if (!string.IsNullOrWhiteSpace(Id))
        {
            // Document chat
            var (access, file) = await ElasticManager.GetDocumentAsync(UserId, Id, false);
            if (access is not (FileAccessResult.FullAccess or FileAccessResult.ReadOnly)
                || file is null || file.IsDeleted)
            {
                ForbiddenMessage = "You do not have access to the file or the file was not found.";
                this.StateHasChanged();
                return;
            }

            initialRequest.Functions = new()
            {
                //ChatAssistantCommandHandler.AvailableFunctionDefinitions["get_time"],
                ChatAssistantCommandHandler.AvailableFunctionDefinitions["get_text"],
                ChatAssistantCommandHandler.AvailableFunctionDefinitions["process"]
            };

            Chat = ChatCompletionService.CreateNewDocumentChat(initialRequest, authState.User.Identity.Name, UserId, file);
        }
        else
        {
            // General chat
            // Get the list of documents and send that as additional context
            //var recentFileCount = 5;
            var docs = await ElasticManager.GetDocumentsAsync(UserId, false);
            // strip out fields that don't matter and shorten property names
            StringBuilder builder = new();
            builder.AppendLine($"Total Files: {docs.Count} Storage Used: {docs.Sum(d => d.Size)} bytes.");
            //builder.AppendLine($"Metadata for {recentFileCount} recent documents available for reference.");

            //var mostRecentDocs = docs.OrderByDescending(d => d.LastUpdated).Take(recentFileCount);

            //foreach (var doc in mostRecentDocs)
            //{
            //    builder.AppendLine(doc.ToContextString());
            //    if (builder.Length >= 6000)
            //    {
            //        builder.Append("More files exist but were cut to save characters.");
            //        break;
            //    }
            //}

            var fileContext = builder.ToString();

            initialRequest.Functions = new()
            {
                //ChatAssistantCommandHandler.AvailableFunctionDefinitions["get_time"],
                ChatAssistantCommandHandler.AvailableFunctionDefinitions["search"]
            };

            Chat = ChatCompletionService.CreateNewGeneralChat(initialRequest, authState.User.Identity.Name, fileContext);
        }
        LastResponse = await Chat.StartChatAsync();
        this.StateHasChanged();
    }

    private async Task SendUserMessageAsync()
    {
        if (string.IsNullOrWhiteSpace(UserMessage)) return;

        var msgCopy = UserMessage;
        UserMessage = null;
        var response = await Chat.SendUserMessage(msgCopy);
        while (response is not null)
        {
            LastResponse = response;
            var choice = response.Choices.First();
            response = null;

            this.StateHasChanged();
            await Task.Delay(1); // Add a delay to hopefully update the text
            
            // Handle any commands the Assistant may have invoked
            if (choice.FinishReason == FinishReason.Function_Call && choice.Message.FunctionCall is not null)
            {
                response = await ChatAssistantCommandHandler.HandleCommandsAsync(Chat, UserId, choice.Message);
            }
        }
    }

    private async Task KeyUpHandler(KeyboardEventArgs keyboardEvent)
    {
        if (keyboardEvent.Key == ConsoleKey.Enter.ToString())
        {
            await SendUserMessageAsync();
        }
    }
}
