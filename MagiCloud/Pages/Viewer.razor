@page "/view/{Id}"
@using MagiCloud.DataManager;
@using MagiCommon.Extensions
@using MagiCommon.Models;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.Extensions.Logging;
@using System.IO;

@inject IDataManager DataManager
@inject IElasticFileRepo Elastic
@inject ILogger<Viewer> Logger

@if (FileInfo is not null)
{
    <Column>
        <Row>
            <Heading TextAlignment=TextAlignment.Center>@FileInfo.GetFileName()</Heading>
        </Row>
        <Row TextAlignment=TextAlignment.Center>
            <Column>
                @if (string.IsNullOrWhiteSpace(FileInfo.MimeType))
                {
                    <Anchor To=@FileInfo.GetFileContentUri(false) Target=Target.Blank>
                        Try To View In Browser
                    </Anchor>
                }
                else if (this.FileInfo.MimeType.StartsWith("image/"))
                {
                    <Image Source=@FileInfo.GetFileContentUri(true) Text=@FileInfo.GetFileName() Width=Width.Max100></Image>
                }
                else if (FileInfo.MimeType.StartsWith("audio/"))
                {
                    <video controls poster="images/audio_poster.png" crossorigin="anonymous" width="100%" height="480" src=@FileInfo.GetFileContentUri(false)>
                        <source class="u-audio" type=@FileInfo.MimeType src=@FileInfo.GetFileContentUri(false)>
                        @if (!string.IsNullOrWhiteSpace(FileInfo.Text))
                        {
                            <track label="English" kind="subtitles" srclang="en" src=@(FileInfo.GetFileContentUri(false)+"/text")>
                        }
                    </video>
                }
                else if (FileInfo.MimeType.StartsWith("video/"))
                {
                    <video controls crossorigin="anonymous" src=@FileInfo.GetFileContentUri(false) width="100%">
                        <source class="u-video" type=@FileInfo.MimeType src=@FileInfo.GetFileContentUri(false)>
                        @if (!string.IsNullOrWhiteSpace(FileInfo.Text))
                        {
                            <track label="English" kind="subtitles" srclang="en" src=@(FileInfo.GetFileContentUri(false)+"/text")>
                        }
                    </video>
                }
                else
                {
                    <Anchor To=@FileInfo.GetFileContentUri(false) Target=Target.Blank>
                        Try To View In Browser
                    </Anchor>
                }
            </Column>
        </Row>
        <Row>
            <Span TextAlignment="TextAlignment.Center">
                <Button Type=ButtonType.Link Color=Color.Primary To=@FileInfo.GetFileContentUri(true) Target=Target.Blank>Download File</Button>
                @if (!string.IsNullOrWhiteSpace(FileInfo.Text))
                {
                    <Button Type=ButtonType.Link Color=Color.Secondary To=@(FileInfo.GetFileContentUri()+"/text") Target=Target.Blank>Download Text</Button>
                }
            </Span>
        </Row>
        <Row>
            @if (!string.IsNullOrWhiteSpace(FileInfo.Text))
            {
                <textarea readonly style="width: 100%" rows=5>
                    @FileInfo.Text
                </textarea>
            }
        </Row>
        <Row>
            <div>&nbsp;</div>
        </Row>
    </Column>
}
else if (FileAccess is not null)
{
    <Heading>Not Found</Heading>
    <Paragraph>
        File not found or you do not have access.
    </Paragraph>
}
else
{
    <Heading>Loading...</Heading>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    protected string UserId { get; set; }

    [Parameter]
    public string Id { get; set; }
    protected ElasticFileInfo FileInfo { get; set; }
    protected FileAccessResult? FileAccess { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var authState = await AuthenticationStateTask;
            UserId = authState.User.GetUserId();
            if (!string.IsNullOrWhiteSpace(Id))
            {
                await PopulateFileInfo(Id);
            }
            this.StateHasChanged();
        }
    }

    protected async Task PopulateFileInfo(string id)
    {
        var (accessResult, info) = await Elastic.GetDocumentAsync(UserId, id, true);
        if (accessResult is FileAccessResult.FullAccess or FileAccessResult.ReadOnly
            && info is not null && !info.IsDeleted)
        {
            FileInfo = info;
            FileAccess = accessResult;
        }
    }
}
