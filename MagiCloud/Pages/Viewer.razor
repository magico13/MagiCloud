@page "/view/{Id}"
@using MagiCloud.DataManager;
@using MagiCommon.Extensions
@using MagiCommon.Models;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.Extensions.Logging;
@using System.IO;

@inject IDataManager DataManager
@inject IElasticFileRepo Elastic
@inject ILogger<Viewer> Logger

@if (FileInfo is not null)
{
    <div class="viewer-container">
        <div class="viewer-header">
            <h1 class="text-center">@FileInfo.GetFileName()</h1>
        </div>
        <div class="viewer-content">
            @if (this.FileInfo.MimeType?.StartsWith("image/") == true)
            {
                <img src="@FileInfo.GetFileContentUri(true)" alt="@FileInfo.GetFileName()" class="viewer-image" />
            }
            else if (FileInfo.MimeType?.StartsWith("audio/") == true)
            {
                <video controls poster="images/audio_poster.png" crossorigin="anonymous" class="viewer-video">
                    <source class="u-audio" type=@FileInfo.MimeType src=@FileInfo.GetFileContentUri(false)>
                    @if (!string.IsNullOrWhiteSpace(FileInfo.Text))
                    {
                        <track label="English" kind="subtitles" srclang="en" src=@(FileInfo.GetFileContentUri(false)+"/text")>
                    }
                </video>
            }
            else if (FileInfo.MimeType?.StartsWith("video/") == true)
            {
                <video controls crossorigin="anonymous" class="viewer-video">
                    <source class="u-video" type=@FileInfo.MimeType src=@FileInfo.GetFileContentUri(false)>
                    @if (!string.IsNullOrWhiteSpace(FileInfo.Text))
                    {
                        <track label="English" kind="subtitles" srclang="en" src=@(FileInfo.GetFileContentUri(false)+"/text")>
                    }
                </video>
            }
            else if (FileInfo.MimeType?.StartsWith("text/") == true)
            {
                <textarea readonly class="viewer-textarea">
                    @FileInfo.Text
                </textarea>
            }
            else if (FileInfo.MimeType?.Equals("application/pdf", StringComparison.OrdinalIgnoreCase) == true)
            {
                <iframe src="@FileInfo.GetFileContentUri(false)" class="viewer-iframe">
                    Your browser does not support PDFs.
                </iframe>
            }
            else
            {
                <a href="@FileInfo.GetFileContentUri(false)" target="_blank" class="viewer-link">
                    Try To View In Browser
                </a>
            }
        </div>
        <div class="viewer-footer">
            <div class="viewer-buttons">
                <button class="btn btn-primary" onclick="window.open('@FileInfo.GetFileContentUri(true)', '_blank')">Download File</button>
                @if (!string.IsNullOrWhiteSpace(FileInfo.Text) && FileInfo.MimeType?.StartsWith("text/") != true)
                {
                    <button class="btn btn-secondary" onclick="window.open('@(FileInfo.GetFileContentUri()+"/text")', '_blank')">Download Text</button>
                }
            </div>
        </div>
    </div>
}
else if (FileAccess is not null)
{
    <h1>Not Found</h1>
    <p>File not found or you do not have access.</p>
}
else
{
    <h1>Loading...</h1>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    protected string UserId { get; set; }

    [Parameter]
    public string Id { get; set; }
    protected ElasticFileInfo FileInfo { get; set; }
    protected FileAccessResult? FileAccess { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var authState = await AuthenticationStateTask;
            UserId = authState.User.GetUserId();
            if (!string.IsNullOrWhiteSpace(Id))
            {
                await PopulateFileInfo(Id);
            }
            this.StateHasChanged();
        }
    }

    protected async Task PopulateFileInfo(string id)
    {
        var (accessResult, info) = await Elastic.GetDocumentAsync(UserId, id, true);
        if (accessResult is FileAccessResult.FullAccess or FileAccessResult.ReadOnly
            && info is not null && !info.IsDeleted)
        {
            FileInfo = info;
            FileAccess = accessResult;
        }
    }
}
