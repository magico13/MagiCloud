@page "/trash"
@using MagiCloud.DataManager;
@using MagiCommon
@using MagiCommon.Comparers.ElasticFileInfoComparers;
@using MagiCommon.Extensions
@using MagiCommon.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Logging

@attribute [Authorize]

@inject IDataManager DataManager
@inject ElasticManager Elastic
@inject ILogger<TrashCan> Logger

<h3>Trash Can</h3>

@if (files?.Any() == true)
{
    <Button Color=Color.Danger Clicked=EmptyTrash>Empty Trash</Button>
    <DataGrid
            TItem=ElasticObject
            Data=files
            PageSize=10
            Responsive
            ShowPager
            ShowPageSizes
            Sortable
            SelectionMode=DataGridSelectionMode.Single>
        <DataGridColumns>
            <DataGridColumn Field="@nameof(ElasticObject.Name)" Caption="Name" />
            <DataGridColumn Field="@nameof(ElasticObject.LastUpdated)" Caption="Last Updated">
                <DisplayTemplate>
                    @(context.LastUpdated.LocalDateTime)
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn Field="@nameof(ElasticObject.Name)" Caption="Type" Sortable=false>
                <DisplayTemplate>
                    @if(context is ElasticFileInfo efi)
                    {
                        @(efi.MimeType)
                    }
                    else if (context is ElasticFolder)
                    {
                        @("Folder")
                    }
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn Sortable=false>
                <DisplayTemplate>
                    <Button Color="Color.Primary" Clicked=@(async () => await UndeleteAsync(context))>Restore</Button>
                    <Button Color="Color.Danger" Clicked=@(async () => await PermanentlyDeleteAsync(context))>Perma-Delete</Button>
                </DisplayTemplate>
            </DataGridColumn>
        </DataGridColumns>
    </DataGrid>
}
else
{
    <Paragraph>
        No files in trash...
    </Paragraph>
}


@code{
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private string UserId { get; set; }

    private List<ElasticObject> files;

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authState = await AuthenticationStateTask;
        UserId = authState.User.GetUserId();
        await GetDeletedObjects();
    }

    private async Task GetDeletedObjects()
    {
        try
        {
            files = new();
            var foldersList = await Elastic.FolderRepo.GetFoldersAsync(UserId, true);
            if (foldersList?.Any() == true)
            {
                files.AddRange(foldersList.OrderBy(f => f.Name));
            }
            var fileList = await Elastic.FileRepo.GetDocumentsAsync(UserId, true);
            if (fileList?.Any() == true)
            {
                files.AddRange(fileList.OrderBy(f => f.Name));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error getting file list");
        }
    }

    private async Task PermanentlyDeleteAsync(ElasticObject elasticObject)
    {
        await DeleteObject(elasticObject);
        files.RemoveAll(f => f.Id == elasticObject.Id);
    }

    private async Task UndeleteAsync(ElasticObject elasticObject)
    {
        elasticObject.IsDeleted = false;
        if (!string.IsNullOrWhiteSpace(elasticObject.ParentId))
        {
            var parents = await Elastic.GetParentsForObjectAsync(UserId, elasticObject);
            foreach (var parent in parents)
            {
                if (parent.IsDeleted)
                {
                    await UndeleteAsync(parent);
                }
            }
        }
        if (elasticObject is ElasticFileInfo fileInfo)
        {
            await Elastic.FileRepo.IndexDocumentAsync(UserId, fileInfo);
        }
        else if (elasticObject is ElasticFolder folderInfo)
        {
            await Elastic.FolderRepo.UpsertFolderAsync(UserId, folderInfo);
        }

        files.Remove(elasticObject);
    }

    private async Task EmptyTrash()
    {
        foreach (var obj in new List<ElasticObject>(files) ?? new())
        {
            await DeleteObject(obj);
            files.Remove(obj);
        }
    }

    private async Task DeleteObject(ElasticObject obj)
    {
        if (await Elastic.DeleteObject(UserId, obj, true))
        {
            if (obj is ElasticFileInfo fileInfo)
            {
                DataManager.DeleteFile(obj.Id);
            }
        }
    }
}