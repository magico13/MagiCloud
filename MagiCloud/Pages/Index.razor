@page "/"
@using MagiCommon
@using MagiCommon.Extensions
@using MagiCommon.Models
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.Extensions.Logging

@attribute [Authorize]

@inject ElasticManager Elastic
@inject ILogger<Index> Logger

<Upload OnUploadComplete=OnFilesUploaded CurrentDirectoryId=@CurrentFolderId />

<Heading Size=HeadingSize.Is3>Files</Heading>
@*<SearchBar OnSearch=OnSearch />*@
<FilesComponent OnFolderChanged=OnFolderChanged @ref=FileComponent />

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private string UserId { get; set; }

    private string CurrentFolderId { get; set; }

    private List<SearchResult> Files { get; set; }
    private FilesComponent FileComponent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authState = await AuthenticationStateTask;
        UserId = authState.User.GetUserId();
    }

    //public async Task GetFileList()
    //{
    //    try
    //    {
    //        Files = await Elastic.FolderRepo.get.FileRepo.GetDocumentsAsync(UserId, false);
    //    }
    //    catch (Exception ex)
    //    {
    //        Logger.LogError(ex, "Failed to update file list.");
    //    }
    //}

    public async Task OnFilesUploaded()
    {
        // 1 second delay so that the newly uploaded files can make it into elasticsearch
        await FileComponent.FilterToFolder(FileComponent.CurrentFolder, 1000);
    }

    public void OnSearch(List<SearchResult> results)
    {
        Files = results;
    }

    public void OnFolderChanged(string folderId)
    {
        CurrentFolderId = folderId;
    }
}