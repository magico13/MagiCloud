@using Blazorise
@using Humanizer
@using MagiCommon
@using MagiCommon.Comparers.ElasticFileInfoComparers;
@using MagiCommon.Extensions
@using MagiCommon.Models
@using Microsoft.Extensions.Logging

@inject ILogger<FilesComponent> Logger
@inject ElasticManager Elastic

<Modal @ref=_newFolderModal>
    <ModalContent Centered>
        <Form>
            <ModalHeader>
                <ModalTitle>New Folder</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <Validations @ref=_newFolderValidations StatusChanged=NewFolderValidatorsChanged>
                    <Field>
                        <FieldLabel>Folder Name</FieldLabel>
                        <Validation Validator=ExtendedValidationRules.IsFileName>
                            <TextEdit @bind-Text=_newFolderText Autofocus />
                            <ValidationError>
                                Invalid folder name.
                            </ValidationError>
                            <ValidationNone>
                                Folder name is required.
                            </ValidationNone>
                        </Validation>
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color=Color.Secondary Clicked=@(() => CloseModal(false))>Cancel</Button>
                <Button Type=ButtonType.Submit PreventDefaultOnSubmit Color=Color.Primary Disabled=@(!_newFolderValidatorsPassed) Clicked=@(() => CloseModal(true))>
                    Create
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<Div Flex=Flex.JustifyContent.Between>
    <Span>
        <Button Color=Color.Link Clicked=@(() => FilterToFolder(null)) Padding=Padding.Is1>
            <Icon Name=IconName.Home />
        </Button>
        @foreach (var parent in Parents)
        {
            <Span>/</Span>
            <Button Color=Color.Link Clicked=@(() => FilterToFolder(parent)) Padding=Padding.Is1>
                @parent.Name
            </Button>
        }
        @if (CurrentFolder is not null)
        {
            <Span>/</Span>
            <Button Color=Color.Link Clicked=@(() => FilterToFolder(CurrentFolder)) Padding=Padding.Is1>
                @CurrentFolder.Name
            </Button>
        }
    </Span>
    <Button Color=Color.Primary Clicked=OpenModal Float=Float.End>
        New Folder
    </Button>
</Div>

@if (FilesAndFolders == null)
{
    <Paragraph>
        Loading files...
    </Paragraph>
}
else if (!FilesAndFolders.Any())
{
    <Paragraph>
        No files found...
    </Paragraph>
}
else
{
    @*DetailRowTrigger =@(w => (w.Item?.BackingObject as ElasticFileInfo)?.Highlights?.Any() == true)*@
    <DataGrid TItem=FileWrapper
                Data=FilesAndFolders
                
                Sortable
                SelectionMode=DataGridSelectionMode.Single
                CommandMode=DataGridCommandMode.Default
                Responsive
                PageSize=10
                ShowPager
                ShowPageSizes
                Editable
                EditMode=DataGridEditMode.Popup
                RowRemoved=RowRemoved
                RowUpdated=RowUpdated
                UseValidation>
        <DataGridColumns>
            <DataGridCommandColumn NewCommandAllowed=false EditCommandAllowed DeleteCommandAllowed  >
                <SaveCommandTemplate>
                    <Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked"> <Icon Name="IconName.Save"/> </Button>
                </SaveCommandTemplate>
                <CancelCommandTemplate>
                    <Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked"> <Icon Name="IconName.Times"/> </Button>
                </CancelCommandTemplate>
                <EditCommandTemplate>
                    <Button ElementId="btnEdit" Color="Color.Primary" Clicked="@context.Clicked" Visibility="@(context.Item.BackingObject is null ? Visibility.Invisible : Visibility.Visible)"> <Icon Name="IconName.Edit"/> </Button>
                </EditCommandTemplate>
                <DeleteCommandTemplate>
                    <Button ElementId="btnDelete" Color="Color.Danger" Clicked="@context.Clicked" Visibility="@(context.Item.BackingObject is null ? Visibility.Invisible : Visibility.Visible)"> <Icon Name="IconName.Delete"/> </Button>
                </DeleteCommandTemplate>
            </DataGridCommandColumn>
            <DataGridColumn Field="Name" Caption="File Name" Editable Validator=ExtendedValidationRules.IsFilePath>
                <DisplayTemplate>
                    @if(context.BackingObject is ElasticFileInfo fileInfo)
                    {
                        @*<Button Type="ButtonType.Link" To="@context.BackingFileInfo.GetFileContentUri(true)" Target="Target.Blank">
                            <Icon Name="IconName.Download" />
                        </Button>*@
                        <Anchor To="@("/view/" + fileInfo.Id)" Target="Target.Blank">
                            @fileInfo.GetFileName()
                        </Anchor>
                    }
                    else if (context.BackingObject is null || context.BackingObject is ElasticFolder)
                    {
                        ElasticFolder folderInfo = context.BackingObject as ElasticFolder;
                        <Button Clicked="@(() => FilterToFolder(folderInfo))">
                            @context.Name
                        </Button>
                    }
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn Field="Size" Caption="File Size">
                <DisplayTemplate>
                    @if (context.Size.HasValue)
                    {
                        <Span>
                            @((context.Size).Value.Bytes().ToString("#.##"))
                        </Span>
                    }
                    else
                    {
                        @string.Empty
                    }
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn Field="MimeType" Caption="File Type" />
            <DataGridColumn Field="LastUpdated" Caption="Last Update">
                <DisplayTemplate>
                    <Tooltip Text="@(context.LastUpdated?.LocalDateTime.ToString())">
                        @(context.LastUpdated?.LocalDateTime.Humanize())
                    </Tooltip>
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn Field="IsPublic" Caption="Public?">
                <DisplayTemplate>
                    @if (context.IsPublic == true)
                    {
                        <Button Clicked="@(async () => await UpdateVisibility(context, false))">
                            <Icon Name="IconName.Eye"/>
                        </Button>
                    }
                    else if (context.IsPublic == false)
                    {
                        <Button Clicked="@(async () => await UpdateVisibility(context, true))">
                            <Icon Name="IconName.EyeSlash" IconStyle="IconStyle.Regular"/>
                        </Button>
                    }
                </DisplayTemplate>
            </DataGridColumn>
        </DataGridColumns>
        @*<DetailRowTemplate>
            @if(context?.BackingObject?.Highlights?.Any() == true)
            {
                // print out all the highlights
               @((MarkupString)string.Join("<br/>", context.BackingObject.Highlights))
            }
        </DetailRowTemplate>*@
    </DataGrid>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private string UserId { get; set; }

    [Parameter]
    public EventCallback<string> OnFolderChanged { get; set; }

    //[Parameter]
    //public List<ElasticObject> FolderContents
    //{
    //    get => _folderChildren;
    //    set
    //    {
    //        _folderChildren = value;
    //        //SortFiles();
    //    }
    //}

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        UserId = authState.User.GetUserId();
        await base.OnInitializedAsync();
        await FilterToFolder(CurrentFolder);
    }

    private List<ElasticFolder> Parents { get; set; } = new();
    private List<FileWrapper> FilesAndFolders { get; set; }
    private ElasticFolder CurrentFolder { get => _folder;
        set
        {
            if (_folder?.Id != value?.Id)
            {
                _folder = value;
                OnFolderChanged.InvokeAsync(_folder?.Id);
            }
        }
    }
    private ElasticFolder _folder = null;

    //private List<ElasticObject> _folderChildren;
    private string _folderPath = "/";
    private Modal _newFolderModal;
    private Validations _newFolderValidations;
    private bool _newFolderValidatorsPassed;
    private string _newFolderText;

    private void NewFolderValidatorsChanged(ValidationsStatusChangedEventArgs e)
    {
        _newFolderValidatorsPassed = e.Status == ValidationStatus.Success;
    }
    private async void OpenModal()
    {
        _newFolderText = null;
        await _newFolderModal.Show();
    }

    private async void CloseModal(bool isOk)
    {
        if (isOk && (await _newFolderValidations.ValidateAll()))
        {
            await NewFolder(_newFolderText);
        }
        _newFolderText = null;
        await _newFolderModal.Hide();
    }

    //public void SortFiles()
    //{
    //    try
    //    {
    //        if (_files?.Any() == true)
    //        {
    //            _files.Sort(new NameComparer());
    //            FilterToFolder(CurrentFolder);
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        Logger.LogError(ex, "Error setting file list");
    //    }
    //}

    private async Task FilterToFolder(ElasticFolder folder, int delay = 1000)
    {
        if (delay > 0) await Task.Delay(delay);
        CurrentFolder = folder;
        FilesAndFolders = new List<FileWrapper>();
        //if (folder != null)
        //{
        //    var (_, parentFolder) = await Elastic.FolderRepo.GetFolderAsync(UserId, folder.ParentId);
        //    var parentWrapper = new FileWrapper();
        //    if (parentFolder != null)
        //    {
        //        parentWrapper = new FileWrapper(parentFolder);
        //    }
        //    parentWrapper.Name = "..";
        //    FilesAndFolders.Add(parentWrapper);
        //}
        var (childFolders, childFiles) = await Elastic.GetChildrenOfFolderAsync(UserId, CurrentFolder?.Id);
        if (childFolders?.Any() == true)
        {
            FilesAndFolders.AddRange(childFolders.Select(f => new FileWrapper(f)).ToList());
        }
        if (childFiles?.Any() == true)
        {
            FilesAndFolders.AddRange(childFiles.Select(f => new FileWrapper(f)).ToList());
        }

        if (folder is not null)
        {
            Parents = await Elastic.GetParentsForObjectAsync(UserId, folder);
            _folderPath = string.Empty;
            if (Parents.Any()) _folderPath = "/" + string.Join('/', Parents.Select(p => p.Name));
            _folderPath += "/" + folder.Name;
        }
        else
        {
            Parents = new();
            _folderPath = "/";
        }
    }

    public async Task RowRemoved(FileWrapper wrapper)
    {
        var backing = wrapper.BackingObject;
        if (backing == null)
        {
            return;
        }
        Logger.LogInformation("Removing object {Name} ({Id})", backing.Name, backing.Id);
        backing.IsDeleted = true;
        FilesAndFolders.Remove(wrapper);
        await Elastic.DeleteObject(UserId, backing, false);
        await FilterToFolder(CurrentFolder);
    }

    public async Task RowUpdated(SavedRowItem<FileWrapper, Dictionary<string, object>> saved)
    {
        var backing = saved.Item.BackingObject;
        if (backing == null)
        {
            return;
        }
        backing.Name = saved.Item.Name;
        Logger.LogInformation("Updating object {Name} ({Id})", backing.Name, backing.Id);

        if (backing is ElasticFileInfo fileInfo)
        {
            await Elastic.FileRepo.IndexDocumentAsync(UserId, fileInfo);
        }
        else if (backing is ElasticFolder folderInfo)
        {
            await Elastic.FolderRepo.UpsertFolderAsync(UserId, folderInfo);
        }

        await FilterToFolder(CurrentFolder);
    }

    public async Task UpdateVisibility(FileWrapper wrapper, bool visible)
    {
        var backing = wrapper.BackingObject;
        await UpdateVisibility(backing, visible);
        await FilterToFolder(CurrentFolder);
    }

    private async Task UpdateVisibility(ElasticObject backing, bool visible)
    {
        Logger.LogInformation("Setting visibility of {Name} ({Id}) to {Visibility}", backing.Name, backing.Id, visible);
        backing.IsPublic = visible;
        if (backing is ElasticFileInfo file)
        {
            await Elastic.FileRepo.IndexDocumentAsync(UserId, file);
        }
        else if (backing is ElasticFolder folder)
        {
            await Elastic.FolderRepo.UpsertFolderAsync(UserId, folder);
        }
    }



    private async Task<bool> NewFolder(string folderName = "New Folder")
    {
        // Creates a new folder under the current one
        var newFolder = new ElasticFolder
        {
            Name = folderName,
            ParentId = CurrentFolder?.Id,
            UserId = UserId
        };
        Logger.LogInformation("Creating new folder {Name} under {ParentId}", newFolder.Name, newFolder.ParentId);
        var newId = await Elastic.FolderRepo.UpsertFolderAsync(UserId, newFolder);
        if (!string.IsNullOrWhiteSpace(newId))
        {
            newFolder.Id = newId;
            //FolderContents.Add(newFolder);
            FilesAndFolders.Add(new FileWrapper(newFolder));
            return true;
        }
        return false;
    }
}